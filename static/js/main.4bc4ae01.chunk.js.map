{"version":3,"sources":["view/DailyCase.js","view/Route.js","App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Option","Select","DailyCaseView","props","clear_state","setState","chart_data","analyze_opt","label","value","selected_analyze_opt","querying_territory","selected_territory","selected_capita","provided_countries","provided_states","provided_counties","displayed_countries","displayed_states","displayed_counties","loading_chart_data","REMOTE_HOST_URL","ANALYZE_EP","COUNTRY","STATE","COUNTY","TER_PROPERTY","TER_PROPERTY_UI","componentDidMount","console","log","load_provided_countries","load_chart_data","get_selected_analyze_opt","p","state","medica","axios","get","params","then","res","data","get_analyze_params","tp","get_presentable_querrying_ter","pq","i","length","push","create_obj_from_ter_ui_index","convert_res_to_chart_data","on_select_analyze_opt","checked_values","new_aso","on_select_country","sel_country","update_selected_territory","country_id","sel","sel_type","ter","find_territory","name","_id","item_id","list","l","on_select_state","sel_state","on_select_county","sel_county","on_input_caputa","add_new_querrying_ter","q","clear_selecter","clear_display_ter","find_ter_name","id","Object","keys","t","chart_data_temp_o","d","parseInt","load_chart_ui","tip","width","aspect","minHeight","margin","strokeDasharray","dataKey","map","type","territory_type","stroke","activeDot","r","get_info_from_btn","e","target","arr","split","find_querrying_item","temp","delete_querrying_ter","qt","indexOf","splice","delete_querrying_ter_ui","className","style","padding","class","gutter","xs","sm","md","lg","align","span","itemLayout","dataSource","this","renderItem","item","Item","Meta","title","description","territory_capita","territory_id","onClick","DeleteFilled","showSearch","placeholder","optionFilterProp","onChange","filterOption","input","option","children","toLowerCase","country","county","defaultValue","prefix","UserOutlined","shape","icon","SearchOutlined","Group","options","PureComponent","Header","Sider","Footer","Route","collapsed","menu_item","menu_page","toggle","switch_menu_item","key","MENU_ITEMS","includes","get_menu_item_title","get_menu_item_page_header","get_menu_item_icon","WarningOutlined","FileSearchOutlined","UploadOutlined","trigger","collapsible","theme","mode","defaultSelectedKeys","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","textAlign","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4bc4ae01.chunk.js","sourcesContent":["import React, { PureComponent} from 'react' \nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n} from 'recharts' \nimport axios from 'axios'\nimport { Checkbox, Layout, Select, Input, Button, Tooltip as AntdToolTip, List, Spin, Row, Col} from 'antd'\nimport { UserOutlined, SearchOutlined, DeleteFilled } from '@ant-design/icons';\n\nconst {Content} = Layout\nconst {Option} = Select\n\nexport default class DailyCaseView extends PureComponent {\n  constructor (props){\n    super(props)\n    console.log('COMPONENT CONSTRUCTED ', this.props)\n    this.state = {\n      chart_data: [],\n      analyze_opt : [\n        { label: 'Capita Percentage', value: 'CAPITA_PERCENTAGE' },\n        { label: 'Latest Only', value: 'LATEST_ONLY' },\n        { label: 'Daily New Case', value: 'DAILY_NEW_CASE' }\n      ],\n      selected_analyze_opt :{\n        'CAPITA_PERCENTAGE': 'FALSE',\n        'LATEST_ONLY': 'FALSE',\n        'DAILY_NEW_CASE': 'FALSE'\n      },\n      querying_territory: {},\n      selected_territory: {},\n      selected_capita: '1000',\n      provided_countries: [],\n      provided_states: [],\n      provided_counties: [],\n      displayed_countries: {},\n      displayed_states: {},\n      displayed_counties: {},\n      loading_chart_data: false\n  }}\n\n  clear_state =() => {\n    this.setState({\n      chart_data: [],\n      analyze_opt : [\n        { label: 'Capita Percentage', value: 'CAPITA_PERCENTAGE' },\n        { label: 'Latest Only', value: 'LATEST_ONLY' },\n        { label: 'Daily New Case', value: 'DAILY_NEW_CASE' }\n      ],\n      selected_analyze_opt :{\n        'CAPITA_PERCENTAGE': 'FALSE',\n        'LATEST_ONLY': 'FALSE',\n        'DAILY_NEW_CASE': 'FALSE'\n      },\n      querying_territory: {},\n      selected_territory: {},\n      selected_capita: '1000',\n      provided_countries: [],\n      provided_states: [],\n      provided_counties: [],\n      displayed_countries: {},\n      displayed_states: {},\n      displayed_counties: {},\n      loading_chart_data: false\n  })\n  }\n\n    REMOTE_HOST_URL = 'https://covid19-tracking-api.herokuapp.com/api'\n    ANALYZE_EP = '/case-analyze'\n    COUNTRY = '/country'\n    STATE = '/state'\n    COUNTY = '/county'\n    TER_PROPERTY = ['territory_id', 'territory_type', 'territory_capita']\n    TER_PROPERTY_UI = ['territory_id', 'territory_type', 'territory_capita', 'name']\n\n    componentDidMount = () => {\n      console.log('COMPONENT LOADED', this.props)\n      this.load_provided_countries()\n      this.load_chart_data()\n    }\n\n    get_selected_analyze_opt = ()=>{\n      console.log(this.props)\n      let p = this.state.selected_analyze_opt\n      p['DEATH_CASE'] = this.props.medica === 'DEATH' ? 'TRUE' : 'FALSE'\n      return p\n    }\n\n    load_provided_countries = () => {\n      axios.get( this.REMOTE_HOST_URL + this.COUNTRY, {\n        params: this.get_selected_analyze_opt()\n      }).then(res => {\n        console.log('Countries preloaded: ', res.data)\n        this.setState({ provided_countries: res.data })\n      })\n    } \n\n    get_analyze_params = () => {\n      let p = this.get_selected_analyze_opt()\n      for (let tp of this.TER_PROPERTY) {\n        p[tp] = this.state.querying_territory ? this.state.querying_territory[tp]: []\n      }\n      console.log('Analyze params ', p)\n      return p\n    }\n\n    get_presentable_querrying_ter = () => {\n      let pq = []\n      if (this.state.querying_territory['territory_id']) {\n        for (let i= 0; i < this.state.querying_territory['territory_id'].length; i++){\n          pq.push(this.create_obj_from_ter_ui_index(i, this.state.querying_territory))\n        }\n      }\n      console.log('Presentable querrying ter: ', pq)\n\n      return pq\n    }\n\n    load_chart_data = () => {\n      this.setState({loading_chart_data: true})\n      axios.get( this.REMOTE_HOST_URL + this.ANALYZE_EP, {\n          params: this.get_analyze_params()\n        })\n      .then(res => {\n          this.setState({loading_chart_data: false})\n          console.log(res)\n          if (res.data.length > 0){\n            const chart_data = this.convert_res_to_chart_data(res.data)\n            console.log('Chart data ', chart_data)\n            this.setState({ chart_data })\n          } else {\n            this.setState({ chart_data: [] })\n          }\n      })\n    }\n\n    on_select_analyze_opt = (checked_values) =>{\n      console.log('Val is ', checked_values)\n      let new_aso = this.state.selected_analyze_opt\n\n      this.setState({\n        selected_analyze_opt :{\n          'CAPITA_PERCENTAGE': 'FALSE',\n          'LATEST_ONLY': 'FALSE',\n          'DAILY_NEW_CASE': 'FALSE'\n        }\n      })\n      for (let c of checked_values) {\n        new_aso[c] = 'TRUE'\n      }\n      console.log('New select analyze opt: ', new_aso)\n      this.setState({\n        selected_analyze_opt: new_aso\n      })\n      this.load_chart_data()\n    }\n\n    on_select_country = (sel_country) => {\n      console.log('selected country',sel_country)\n      this.update_selected_territory(sel_country, 'COUNTRY')\n      const p = this.get_selected_analyze_opt()\n      p.country_id = sel_country\n\n      console.log('Select Country PARAMS ', p)\n\n      axios.get( this.REMOTE_HOST_URL + this.STATE, {\n        params: p\n      }).then(res => {\n        console.log('State preloaded: ', res.data)\n        this.setState({ provided_states: res.data })\n      })\n    }\n\n    update_selected_territory = (sel, sel_type) => {\n      let ter\n      if (sel_type === 'COUNTRY') {\n        ter = this.find_territory(sel, this.state.provided_countries)\n      } else if (sel_type === 'STATE') {\n        ter = this.find_territory(sel, this.state.provided_states)\n      } else if (sel_type === 'COUNTY') {\n        ter = this.find_territory(sel, this.state.provided_counties)\n      } \n\n      console.log(ter)\n      this.setState({\n        selected_territory: {\n          'name': ter.name,\n          'territory_id': ter._id,\n          'territory_type': sel_type\n        }})\n\n      this.state[(sel_type === 'COUNTRY') ? 'displayed_countries': (sel_type === 'STATE')? 'displayed_states' : 'displayed_counties'] ={\n        'name': ter.name,\n        'territory_id': ter._id,\n        'territory_type': sel_type\n      }\n    }\n\n    find_territory = (item_id, list) => {\n      for (let l of list) {\n        if (l['_id'] === item_id) {\n          return l\n        }\n      }\n    }\n\n    on_select_state = (sel_state) => {\n      this.update_selected_territory(sel_state, 'STATE')\n      const p = this.get_selected_analyze_opt()\n      p['state_id'] = sel_state\n\n      console.log('Select State PARAMS ', p)\n\n      axios.get( this.REMOTE_HOST_URL + this.COUNTY, {\n        params: p\n      }).then(res => {\n        console.log('County preloaded: ', res.data)\n        this.setState({ provided_counties: res.data })\n      })\n    }\n\n    on_select_county = (sel_county) => {\n      this.update_selected_territory(sel_county, 'COUNTY')\n    }\n\n    on_input_caputa = (selected_capita) => {\n      this.setState({selected_capita})\n    }\n\n    add_new_querrying_ter = () => {\n      let q = this.state.querying_territory\n      if (q['territory_id']) q['territory_id'].push(this.state.selected_territory['territory_id']) \n      else q['territory_id'] = [this.state.selected_territory['territory_id']]\n\n      if (q['territory_type']) q['territory_type'].push(this.state.selected_territory['territory_type']) \n      else q['territory_type'] = [this.state.selected_territory['territory_type']]\n\n      if (q['territory_capita']) q['territory_capita'].push(this.state.selected_capita) \n      else q['territory_capita'] = [this.state.selected_capita]\n\n      if (q['name']) q['name'].push(this.state.selected_territory['name']) \n      else q['name'] = [this.state.selected_territory['name']]\n\n      this.load_chart_data()\n      this.clear_selecter()\n      this.clear_display_ter()\n      this.get_presentable_querrying_ter()\n      console.log('Clearing display: ', this.state)\n\n    }\n\n    find_ter_name = (id) =>{\n      if (this.state.querying_territory['territory_id']) {\n        for (let i= 0; i < this.state.querying_territory['territory_id'].length; i++){\n          if (this.state.querying_territory['territory_id'][i] === id){\n            return this.state.querying_territory['name'][i]\n          }\n        }\n      }\n    }\n\n    convert_res_to_chart_data = (data) => {\n      let chart_data = []\n      const time_series = Object.keys(data[0]['case'])\n      for (let t of time_series){\n          let chart_data_temp_o = {}\n          chart_data_temp_o['name'] = t\n          for (let d of data){\n              chart_data_temp_o[d['territory_type'] + ' ' + this.find_ter_name(d['territory_id'])] = parseInt(d['case'][t])\n          }\n          chart_data.push(chart_data_temp_o)\n      }\n      console.log(chart_data)\n      return chart_data\n    }\n\n    clear_selecter = () => {\n      this.setState({\n        selected_territory: {},\n        selected_capita: '1000'\n      })\n    }\n\n    clear_display_ter = () => {\n      this.setState({\n        displayed_countries: {},\n        displayed_states: {},\n        displayed_counties: {}\n      })\n    }\n\n    load_chart_ui = () => {\n      if (this.state.loading_chart_data) {\n        return (\n          <div>\n            <Spin tip=\"Loading chart data\"/>\n          </div>\n        )\n      } else {\n        return (\n          <ResponsiveContainer width= '100%' aspect= {4.0/3.0} minHeight= '300px'>\n            <LineChart\n              data={this.state.chart_data}\n              margin={50}\n            >\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              {\n                this.get_presentable_querrying_ter().map (ter => (\n                  <Line type='monotone' dataKey={ter.territory_type+ \" \" + ter.name} stroke='#8884d8' activeDot={{ r: 8 }} />\n                ))\n              }\n              <Legend />\n            </LineChart>\n          </ResponsiveContainer>\n        )\n      }\n    }\n\n    get_info_from_btn = (e) => {\n      if (e.target.id) {\n        let arr = e.target.id.split(' ')\n        console.log('Editing ', arr)\n        return arr\n      }\n    }\n\n    find_querrying_item = (id, type) => {\n      if (this.state.querying_territory['territory_id']) {\n        for (let i = 0; i < this.state.querying_territory['territory_id'].length; i++) {\n          if (this.state.querying_territory['territory_id'][i] === id && this.state.querying_territory['territory_type'][i] === type){\n            return this.create_obj_from_ter_ui_index(i, this.state.querying_territory)\n          }\n        }\n      }\n    }\n\n    create_obj_from_ter_ui_index = (i, querying_territory) => {\n      let temp = {}\n      for (let tp of this.TER_PROPERTY_UI) {\n        temp[tp] = querying_territory[tp][i]\n      }\n      return temp\n    }\n\n    delete_querrying_ter = (ter) =>{\n      let qt = {}\n      console.log('Deleting ', ter)\n      for (let t of this.TER_PROPERTY_UI){\n        let temp = this.state.querying_territory[t]\n        console.log('index ', temp.indexOf(ter[t]))\n        temp.splice( temp.indexOf(ter[t]),1 )\n        qt[t] = temp\n      }\n      console.log(\"New querrying: \", qt)\n      this.setState({\n        querying_territory: qt\n      })\n    }\n\n    delete_querrying_ter_ui =(e)=>{\n      let id = this.get_info_from_btn(e)[0]\n      let type = this.get_info_from_btn(e)[1]\n\n      let ter = this.find_querrying_item(id, type)\n      this.delete_querrying_ter(ter)\n    }\n\n  render() {\n    return (\n      <Content\n            className='site-layout-background'\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          >\n            <Row class = \"territory\" gutter={[{ xs: 8, sm: 16, md: 24, lg: 32 }, { xs: 8, sm: 16, md: 24, lg: 32 }]} align= \"middle\">\n              <Col span= {7}>\n                Querrying territory:\n                <List\n                  itemLayout=\"horizontal\"\n                  dataSource={this.get_presentable_querrying_ter()}\n                  renderItem={item => (\n                    <List.Item>\n                      <List.Item.Meta\n                        title={item.name}\n                        description = {item.territory_type + \". Capita: \" + item.territory_capita}\n                      />\n                      <Button id = {item.territory_id + \" \" + item.territory_type} onClick = {this.delete_querrying_ter_ui}><DeleteFilled/></Button>\n                    </List.Item>\n                  )}\n                />\n              </Col>\n              <Col span= {15}>\n                Select new territory: \n                <Row class = 'selected-territory' gutter={[{ xs: 4, sm: 8, md: 12, lg: 16 },{ xs: 4, sm: 8, md: 12, lg: 16 }]}>\n                  <Col class = 'selected-col'>\n                    <Select\n                      showSearch\n                      style={{ width: 200 }}\n                      placeholder=\"Select a country\"\n                      optionFilterProp=\"children\"\n                      onChange={this.on_select_country}\n                      value = {this.state.displayed_countries['name']}\n                      filterOption={(input, option) =>\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                      }\n                    >\n                      {\n                        this.state.provided_countries.map(country => (\n                          <Option value= {country._id}>{country.name}</Option>\n                        ))\n                      }\n                    </Select>\n                  </Col>\n                  <Col class = 'selected-col'>\n                    <Select\n                      showSearch\n                      style={{ width: 200 }}\n                      placeholder=\"Select a state\"\n                      optionFilterProp=\"children\"\n                      onChange={this.on_select_state}\n                      value = {this.state.displayed_states['name']}\n                      filterOption={(input, option) =>\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                      }\n                    >\n                      {\n                        this.state.provided_states.map(state => (\n                          <Option value= {state._id}>{state.name}</Option>\n                        ))\n                      }\n                    </Select>\n                  </Col>\n                  <Col class = 'selected-col'>\n                    <Select\n                      showSearch\n                      style={{ width: 200 }}\n                      placeholder=\"Select a county\"\n                      optionFilterProp=\"children\"\n                      onChange={this.on_select_county}\n                      value = {this.state.displayed_counties['name']}\n                      filterOption={(input, option) =>\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                      }\n                    >\n                      {\n                        this.state.provided_counties.map(county => (\n                          <Option value= {county._id}>{county.name}</Option>\n                        ))\n                      }\n                    </Select>\n                  </Col>\n                  <Col class = 'selected-col'>\n                    <Input defaultValue = \"1000\" placeholder=\"Input capita\" prefix={<UserOutlined />} onChange = {this.on_input_caputa}/>\n                  </Col>\n                  <Col class = 'selected-col'>\n                    <AntdToolTip title=\"search\">\n                      <Button type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} onClick = {this.add_new_querrying_ter}/>\n                    </AntdToolTip>\n                  </Col>\n                </Row>\n                <Row class= \"analyze-option\">\n                  <Checkbox.Group options={this.state.analyze_opt} onChange={this.on_select_analyze_opt} />   \n                </Row>\n              </Col>\n            </Row>\n            <Row class= \"chart\">\n              {this.load_chart_ui()}\n            </Row>\n      </Content>\n    ) \n  }\n}","import { Layout, Menu, Row, Col } from 'antd';\nimport React from 'react'\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  FileSearchOutlined,\n  UploadOutlined,\n  WarningOutlined\n} from '@ant-design/icons';\n\nimport DailyCaseView from './DailyCase'\n\nconst { Header, Sider, Content, Footer } = Layout;\n\nexport default class Route extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  state = {\n    collapsed: false,\n    menu_item: 'DAILY_CASE',\n    menu_page: {}\n  };\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  switch_menu_item = (key) => {\n    console.log('Switching to ', key)\n      if (this.MENU_ITEMS.includes(key)){\n          this.setState({menu_item: key})\n      } else {\n          console.log('Invalid key option: ', key)\n      }\n  }\n\n  componentDidMount = ()=>{\n    this.setState({menu_page: <DailyCaseView medica=\"POSITIVE\"/>})\n  }\n\n  MENU_ITEMS = ['DAILY_CASE', 'DAILY_DEATH_CASE', 'ANALYZE', 'DATA_SOURCE']\n\n  get_menu_item_title = (key) => {\n    switch (key) {\n        case 'DAILY_CASE':\n            return 'Daily Case'\n        case 'DAILY_DEATH_CASE':\n              return 'Daily Death Case'\n        case 'ANALYZE':\n            return 'Analyze'\n        case 'DATA_SOURCE':\n            return 'Data Source'\n        default:\n            console.log('Invalid key option WARNING.')\n            break\n      }\n  }\n\n  get_menu_item_page_header = (key) => {\n    switch (key) {\n        case 'DAILY_CASE':\n            return 'Daily cases of COVID-19'\n        case 'DAILY_DEATH_CASE':\n            return 'Daily death cases of COVID-19'\n        case 'ANALYZE':\n            return 'Analyze COVID-19 Data'\n        case 'DATA_SOURCE':\n            return 'Data Source and Credit'\n        default:\n            console.log('Invalid key option WARNING.')\n            break\n      }\n  }\n\n  get_menu_item_icon = (props) => {\n    switch (props) {\n        case 'DAILY_CASE':\n            return <UserOutlined/>\n        case 'DAILY_DEATH_CASE':\n            return <WarningOutlined/>\n        case 'ANALYZE':\n            return <FileSearchOutlined/>\n        case 'DATA_SOURCE':\n            return <UploadOutlined/>\n        default:\n            console.log('Invalid key option WARNING.')\n            break\n      }\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n          <div className='logo' />\n          <Menu theme='dark' mode='inline' defaultSelectedKeys={[this.state.menu_item]}>\n              {\n                  this.MENU_ITEMS.map(menu_item => (\n                    <Menu.Item key= {menu_item} onClick = {() =>this.switch_menu_item(menu_item)}>\n                        {this.get_menu_item_icon(menu_item)}\n                        <span>{this.get_menu_item_title(menu_item)}</span>\n                    </Menu.Item>\n                  ))\n              }\n          </Menu>\n        </Sider>\n        <Layout className='site-layout'>\n          <Header className='site-layout-background' style={{ padding: '0 24px'}}>\n            <Row>\n              <Col span=\"1\">\n                {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n                  className: 'trigger',\n                  onClick: this.toggle,\n                })}\n              </Col>\n              <Col style={{textAlign: \"center\"}} span= \"23\">\n                {this.get_menu_item_page_header(this.state.menu_item)}\n              </Col>\n            </Row>\n          </Header>\n          <Content\n            className='site-layout-background'\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          >\n              {(() => {\n                if (this.state.menu_item === 'DAILY_CASE') return <DailyCaseView medica = \"POSITIVE\"/>}\n                )()}\n              {(() => {\n                if (this.state.menu_item === 'DAILY_DEATH_CASE') return <DailyCaseView medica = \"DEATH\"/>}\n                )()}\n              {(() => {\n                if (this.state.menu_item === 'ANALYZE') return (<div>Analyze COVID-19 Data</div>)}\n                )()}\n              {(() => {\n                if (this.state.menu_item === 'DATA_SOURCE') return (<div>Data Source and Credit</div>)}\n                )()}\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Created by Minh Nguyen</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Route from './view/Route'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}