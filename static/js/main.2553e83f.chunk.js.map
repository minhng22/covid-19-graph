{"version":3,"sources":["view/DailyCase.js","view/Route.js","App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Option","Select","DailyCaseView","state","chart_data","analyze_opt","label","value","selected_analyze_opt","querying_territory","selected_territory","selected_capita","provided_countries","provided_states","provided_counties","displayed_countries","displayed_states","displayed_counties","loading_chart_data","REMOTE_HOST_URL","ANALYZE_EP","COUNTRY","STATE","COUNTY","TER_PROPERTY","TER_PROPERTY_UI","load_provided_countries","axios","get","params","then","res","console","log","data","setState","get_analyze_params","p","tp","get_presentable_querrying_ter","pq","i","length","temp","push","load_chart_data","convert_res_to_chart_data","on_select_analyze_opt","checked_values","new_aso","analyze_selected_options","on_select_country","sel_country","update_selected_territory","country_id","sel","sel_type","ter","find_territory","name","_id","item_id","list","l","on_select_state","sel_state","on_select_county","sel_county","on_input_caputa","add_new_querrying_ter","q","clear_selecter","clear_display_ter","find_ter_name","id","Object","keys","t","chart_data_temp_o","d","parseInt","load_chart_ui","tip","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","map","type","territory_type","stroke","activeDot","r","this","className","style","padding","minHeight","itemLayout","dataSource","renderItem","item","Item","Meta","title","description","territory_capita","showSearch","placeholder","optionFilterProp","onChange","filterOption","input","option","children","toLowerCase","indexOf","country","county","size","defaultValue","prefix","UserOutlined","shape","icon","SearchOutlined","onClick","Group","options","PureComponent","Header","Sider","Footer","Route","collapsed","menu_item","toggle","switch_menu_item","key","MENU_ITEMS","includes","get_menu_item_title","get_menu_item_page_header","get_menu_item_page","get_menu_item_icon","FileSearchOutlined","UploadOutlined","trigger","collapsible","theme","mode","defaultSelectedKeys","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","textAlign","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2553e83f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react' \nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts' \nimport axios from 'axios'\nimport { Checkbox, Layout, Select, Input, Button, Tooltip as AntdToolTip, List, Spin} from 'antd'\nimport { UserOutlined, SearchOutlined } from '@ant-design/icons';\n\nconst {Content} = Layout\nconst {Option} = Select\n\nexport default class DailyCaseView extends PureComponent {\n    state = {\n        chart_data: [],\n        analyze_opt : [\n          { label: 'Capita Percentage', value: 'CAPITA_PERCENTAGE' },\n          { label: 'Latest Only', value: 'LATEST_ONLY' },\n          { label: 'Daily New Case', value: 'DAILY_NEW_CASE' },\n          { label: 'Death Case', value: 'DEATH_CASE' }\n        ],\n        selected_analyze_opt :{\n          'CAPITA_PERCENTAGE': 'FALSE',\n          'LATEST_ONLY': 'FALSE',\n          'DAILY_NEW_CASE': 'FALSE',\n          'DEATH_CASE': 'FALSE'\n        },\n        querying_territory: {},\n        selected_territory: {},\n        selected_capita: '1000',\n        provided_countries: [],\n        provided_states: [],\n        provided_counties: [],\n        displayed_countries: {},\n        displayed_states: {},\n        displayed_counties: {},\n        loading_chart_data: false\n    }\n\n    REMOTE_HOST_URL = 'https://covid19-tracking-api.herokuapp.com/api'\n    ANALYZE_EP = '/case-analyze'\n    COUNTRY = '/country'\n    STATE = '/state'\n    COUNTY = '/county'\n    TER_PROPERTY = ['territory_id', 'territory_type', 'territory_capita']\n    TER_PROPERTY_UI = ['territory_id', 'territory_type', 'territory_capita']\n\n    componentDidMount(){\n      this.load_provided_countries()\n      this.load_chart_data()\n    }\n\n    load_provided_countries = () => {\n      axios.get( this.REMOTE_HOST_URL + this.COUNTRY, {\n        params: this.state.selected_analyze_opt\n      }).then(res => {\n        console.log('Countries preloaded: ', res.data)\n        this.setState({ provided_countries: res.data })\n      })\n    } \n\n    get_analyze_params = () => {\n      let p = this.state.selected_analyze_opt\n      for (let tp of this.TER_PROPERTY) {\n        p[tp] = this.state.querying_territory ? this.state.querying_territory[tp]: []\n      }\n      console.log('Analyze params ', p)\n      return p\n    }\n\n    get_presentable_querrying_ter = () => {\n      let p = {}\n      let pq = []\n\n      for (let tp of this.TER_PROPERTY_UI) {\n        p[tp] = this.state.querying_territory ? this.state.querying_territory[tp]: []\n      }\n\n      if (p['territory_id']) {\n        for (let i= 0; i < p['territory_id'].length; i++){\n          let temp = {}\n          for (let tp of this.TER_PROPERTY_UI) {\n            temp[tp] = p[tp][i]\n          }\n          pq.push(temp)\n        }\n      }\n      console.log('Presentable querrying ter: ', pq)\n\n      return pq\n    }\n\n    load_chart_data = () => {\n      this.setState({loading_chart_data: true})\n      axios.get( this.REMOTE_HOST_URL + this.ANALYZE_EP, {\n          params: this.get_analyze_params()\n        })\n      .then(res => {\n          this.setState({loading_chart_data: false})\n          console.log(res)\n          if (res.data.length > 0){\n            const chart_data = this.convert_res_to_chart_data(res.data)\n            console.log('Chart data ', chart_data)\n            this.setState({ chart_data })\n          } else {\n            this.setState({ chart_data: [] })\n          }\n      })\n    }\n\n    on_select_analyze_opt = (checked_values) =>{\n      console.log('Val is ', checked_values)\n      let new_aso = this.state.selected_analyze_opt\n\n      this.setState({\n        selected_analyze_opt :{\n          'CAPITA_PERCENTAGE': 'FALSE',\n          'LATEST_ONLY': 'FALSE',\n          'DAILY_NEW_CASE': 'FALSE',\n          'DEATH_CASE': 'FALSE'\n        }\n      })\n      for (let c of checked_values) {\n        new_aso[c] = 'TRUE'\n      }\n      console.log(new_aso)\n      this.setState({\n        analyze_selected_options: new_aso\n      })\n      this.load_chart_data()\n    }\n\n    on_select_country = (sel_country) => {\n      console.log('selected country',sel_country)\n      this.update_selected_territory(sel_country, 'COUNTRY')\n      const p = this.state.selected_analyze_opt\n      p.country_id = sel_country\n\n      console.log('Select Country PARAMS ', p)\n\n      axios.get( this.REMOTE_HOST_URL + this.STATE, {\n        params: p\n      }).then(res => {\n        console.log('State preloaded: ', res.data)\n        this.setState({ provided_states: res.data })\n      })\n    }\n\n    update_selected_territory = (sel, sel_type) => {\n      let ter\n      if (sel_type === 'COUNTRY') {\n        ter = this.find_territory(sel, this.state.provided_countries)\n      } else if (sel_type === 'STATE') {\n        ter = this.find_territory(sel, this.state.provided_states)\n      } else if (sel_type === 'COUNTY') {\n        ter = this.find_territory(sel, this.state.provided_counties)\n      } \n\n      console.log(ter)\n      this.setState({\n        selected_territory: {\n          'name': ter.name,\n          'territory_id': ter._id,\n          'territory_type': sel_type\n        }})\n\n      this.state[(sel_type === 'COUNTRY') ? 'displayed_countries': (sel_type === 'STATE')? 'displayed_states' : 'displayed_counties'] ={\n        'name': ter.name,\n        'territory_id': ter._id,\n        'territory_type': sel_type\n      }\n    }\n\n    find_territory = (item_id, list) => {\n      for (let l of list) {\n        if (l['_id'] === item_id) {\n          return l\n        }\n      }\n    }\n\n    on_select_state = (sel_state) => {\n      this.update_selected_territory(sel_state, 'STATE')\n      const p = this.state.selected_analyze_opt\n      p['state_id'] = sel_state\n\n      console.log('Select State PARAMS ', p)\n\n      axios.get( this.REMOTE_HOST_URL + this.COUNTY, {\n        params: p\n      }).then(res => {\n        console.log('County preloaded: ', res.data)\n        this.setState({ provided_counties: res.data })\n      })\n    }\n\n    on_select_county = (sel_county) => {\n      this.update_selected_territory(sel_county, 'COUNTY')\n    }\n\n    on_input_caputa = (selected_capita) => {\n      this.setState({selected_capita})\n    }\n\n    add_new_querrying_ter = () => {\n      let q = this.state.querying_territory\n      if (q['territory_id']) q['territory_id'].push(this.state.selected_territory['territory_id']) \n      else q['territory_id'] = [this.state.selected_territory['territory_id']]\n\n      if (q['territory_type']) q['territory_type'].push(this.state.selected_territory['territory_type']) \n      else q['territory_type'] = [this.state.selected_territory['territory_type']]\n\n      if (q['territory_capita']) q['territory_capita'].push(this.state.selected_capita) \n      else q['territory_capita'] = [this.state.selected_capita]\n\n      if (q['name']) q['name'].push(this.state.selected_territory['name']) \n      else q['name'] = [this.state.selected_territory['name']]\n\n      this.load_chart_data()\n      this.clear_selecter()\n      this.clear_display_ter()\n      this.get_presentable_querrying_ter()\n      console.log('Clearing display: ', this.state)\n\n    }\n\n    find_ter_name = (id) =>{\n      if (this.state.querying_territory['territory_id']) {\n        for (let i= 0; i < this.state.querying_territory['territory_id'].length; i++){\n          if (this.state.querying_territory['territory_id'][i] === id){\n            return this.state.querying_territory['name'][i]\n          }\n        }\n      }\n    }\n\n    convert_res_to_chart_data = (data) => {\n      let chart_data = []\n      const time_series = Object.keys(data[0]['case'])\n      for (let t of time_series){\n          let chart_data_temp_o = {}\n          chart_data_temp_o['name'] = t\n          for (let d of data){\n              chart_data_temp_o[d['territory_type'] + ' ' + this.find_ter_name(d['territory_id'])] = parseInt(d['case'][t])\n          }\n          chart_data.push(chart_data_temp_o)\n      }\n      console.log(chart_data)\n      return chart_data\n    }\n\n    clear_selecter = () => {\n      this.setState({\n        selected_territory: {},\n        selected_capita: '1000'\n      })\n    }\n\n    clear_display_ter = () => {\n      this.setState({\n        displayed_countries: {},\n        displayed_states: {},\n        displayed_counties: {}\n      })\n    }\n\n    load_chart_ui = () => {\n      if (this.state.loading_chart_data) {\n        return (\n          <div>\n            <Spin tip=\"Loading chart data\"/>\n          </div>\n        )\n      } else {\n        return (\n          <LineChart\n            width={1300}\n            height={800}\n            data={this.state.chart_data}\n            margin={{\n              top: 50, right: 50, left: 100, bottom: 20,\n            }}\n          >\n            <CartesianGrid strokeDasharray='3 3' />\n            <XAxis dataKey='name' />\n            <YAxis />\n            <Tooltip />\n            {\n              this.get_presentable_querrying_ter().map (ter => (\n                <Line type='monotone' dataKey={ter.territory_type+ \" \" + ter.name} stroke='#8884d8' activeDot={{ r: 8 }} />\n              ))\n            }\n            <Legend />\n          </LineChart>\n        )\n      }\n    }\n\n  render() {\n    return (\n      <Content\n            className='site-layout-background'\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          >\n            Querrying territory:\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={this.get_presentable_querrying_ter()}\n              renderItem={item => (\n                <List.Item>\n                  <List.Item.Meta\n                    title={item.name}\n                    description = {item.territory_type + \". Capita: \" + item.territory_capita}\n                  />\n                </List.Item>\n              )}\n            />\n            Country: \n            <Select\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"Select a country\"\n              optionFilterProp=\"children\"\n              onChange={this.on_select_country}\n              value = {this.state.displayed_countries['name']}\n              filterOption={(input, option) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {\n                this.state.provided_countries.map(country => (\n                  <Option value= {country._id}>{country.name}</Option>\n                ))\n              }\n            </Select>\n            \n            State: \n            <Select\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"Select a state\"\n              optionFilterProp=\"children\"\n              onChange={this.on_select_state}\n              value = {this.state.displayed_states['name']}\n              filterOption={(input, option) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {\n                this.state.provided_states.map(state => (\n                  <Option value= {state._id}>{state.name}</Option>\n                ))\n              }\n            </Select>\n            \n            County: \n            <Select\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"Select a county\"\n              optionFilterProp=\"children\"\n              onChange={this.on_select_county}\n              value = {this.state.displayed_counties['name']}\n              filterOption={(input, option) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {\n                this.state.provided_counties.map(county => (\n                  <Option value= {county._id}>{county.name}</Option>\n                ))\n              }\n            </Select>\n\n            <Input size=\"large\" defaultValue = \"1000\" placeholder=\"Input capita\" prefix={<UserOutlined />} onChange = {this.on_input_caputa}/>\n            <AntdToolTip title=\"search\">\n              <Button type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} onClick = {this.add_new_querrying_ter}/>\n            </AntdToolTip>\n            <br/>\n            <Checkbox.Group options={this.state.analyze_opt} onChange={this.on_select_analyze_opt} />\n            <br/>\n            {this.load_chart_ui()}\n      </Content>\n    ) \n  }\n}","import { Layout, Menu } from 'antd';\nimport React from 'react'\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  FileSearchOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\n\nimport DailyCaseView from './DailyCase'\n\nconst { Header, Sider, Content, Footer } = Layout;\n\nexport default class Route extends React.Component {\n  state = {\n    collapsed: false,\n    menu_item: 'DAILY_CASE'\n  };\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  switch_menu_item = (key) => {\n      if (this.MENU_ITEMS.includes(key)){\n          this.setState({menu_item: key})\n      } else {\n          console.log('Invalid key option: ', key)\n      }\n  }\n\n  MENU_ITEMS = ['DAILY_CASE', 'ANALYZE', 'DATA_SOURCE']\n\n  get_menu_item_title = (key) => {\n    switch (key) {\n        case 'DAILY_CASE':\n            return 'Daily Case'\n        case 'ANALYZE':\n            return 'Analyze'\n        case 'DATA_SOURCE':\n            return 'Data Source'\n        default:\n            console.log('Invalid key option WARNING.')\n            break\n      }\n  }\n\n  get_menu_item_page_header = (key) => {\n    switch (key) {\n        case 'DAILY_CASE':\n            return 'Daily cases of COVID-19'\n        case 'ANALYZE':\n            return 'Analyze COVID-19 Data'\n        case 'DATA_SOURCE':\n            return 'Data Source and Credit'\n        default:\n            console.log('Invalid key option WARNING.')\n            break\n      }\n  }\n\n  get_menu_item_page = (key) => {\n    switch (key) {\n        case 'DAILY_CASE':\n            return (<DailyCaseView/>)\n        case 'ANALYZE':\n            return 'Analyze COVID-19 Data'\n        case 'DATA_SOURCE':\n            return 'Data Source and Credit'\n        default:\n            console.log('Invalid key option WARNING.')\n            break\n      }\n  }\n\n  get_menu_item_icon = (key) => {\n    switch (key) {\n        case 'DAILY_CASE':\n            return <UserOutlined/>\n        case 'ANALYZE':\n            return <FileSearchOutlined/>\n        case 'DATA_SOURCE':\n            return <UploadOutlined/>\n        default:\n            console.log('Invalid key option WARNING.')\n            break\n      }\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n          <div className='logo' />\n          <Menu theme='dark' mode='inline' defaultSelectedKeys={[this.state.menu_item]}>\n              {\n                  this.MENU_ITEMS.map(menu_item => (\n                    <Menu.Item key= {menu_item} onClick = {() =>this.switch_menu_item(menu_item)}>\n                        {this.get_menu_item_icon(menu_item)}\n                        <span>{this.get_menu_item_title(menu_item)}</span>\n                    </Menu.Item>\n                  ))\n              }\n          </Menu>\n        </Sider>\n        <Layout className='site-layout'>\n          <Header className='site-layout-background' style={{ padding: 0 }}>\n            {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n              className: 'trigger',\n              onClick: this.toggle,\n            })}\n            {this.get_menu_item_page_header(this.state.menu_item)}\n          </Header>\n          <Content\n            className='site-layout-background'\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          >\n            {this.get_menu_item_page(this.state.menu_item)}\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Created by Minh Nguyen</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Route from './view/Route'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}